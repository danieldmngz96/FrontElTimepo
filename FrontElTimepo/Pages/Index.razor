@page "/"
@using BlazorApp.Services
@using Blazored.TextEditor
@using FrontElTimepo.Models
@inject ArticleService ArticleService

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h3>Artículos</h3>

            @if (articles == null)
            {
                <p><em>Cargando...</em></p>
            }
            else
            {
                <ul>
                    @foreach (var article in articles)
                    {
                        <li>
                            <b>Título del artículo:</b> @article.Title <br />
                            <b>Autor:</b> @article.AuthorName <br />
                            <b>Contenido:</b> @article.Content
                        </li>
                    }
                </ul>
            }
        </div>

        <div class="col-md-6">
            <h3>Crear o Editar Artículo</h3>

            <EditForm Model="currentArticle" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="title" class="form-label">Título</label>
                    <InputText id="title" class="form-control" @bind-Value="currentArticle.Title" />
                </div>
                <div class="mb-3">
                    <label for="authorName" class="form-label">Nombre del Autor</label>
                    <InputText id="authorName" class="form-control" @bind-Value="currentArticle.AuthorName" />
                </div>
                <div class="mb-3">
                    <BlazoredTextEditor @ref="textEditor" Placeholder="Ingrese el contenido aquí..." />
                </div>
                <div class="mb-3">
                    <InputFile OnChange="HandleFileUpload" multiple />
                </div>
                <button type="submit" class="btn btn-primary">Guardar</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<ArticleDto> articles;
    private ArticleDto currentArticle = new ArticleDto();
    private BlazoredTextEditor textEditor;

    protected override async Task OnInitializedAsync()
    {
        articles = await ArticleService.GetArticlesAsync();
    }

           private async Task HandleValidSubmit()
        {
            try
            {
                currentArticle.Content = await textEditor.GetHTML();

                if (currentArticle.Id == 0)
                {
                    await ArticleService.CreateArticleAsync(currentArticle);
                }
                else
                {
                    await ArticleService.UpdateArticleAsync(currentArticle); // Ajuste aquí
                }

                articles = await ArticleService.GetArticlesAsync();
                currentArticle = new ArticleDto();
                await textEditor.LoadHTMLContent(""); // Establecer el contenido del editor en vacío
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al procesar el formulario: {ex.Message}");
                // Manejar el error según sea necesario
            }
        }



    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        // Manejar la carga de archivos aquí si es necesario
    }
}
